1.Создать двух пользователей (с помощью метода User.objects.create_user('username')).

user1 = User.objects.create_user(username= 'Каменистый')
user2 = User.objects.create_user(username= 'Маханенко') 

2. Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

3. Добавить 4 категории в модель Category.

Category.objects.create(name='Интернет')                                       
Category.objects.create(name='Спорт')    
Category.objects.create(name='Музыка') 
Category.objects.create(name='Игры')   


4. Добавить 2 статьи и 1 новость.

author = Author.objects.get(id=1)

Две статьи:
Post.objects.create(author=author, categoryType= 'AR', title= 'Спорт новости', text= 'Много разного текста')
Post.objects.create(author=author, categoryType= 'AR', title= 'Новости музыки', text= 'Много разного текста')

Одна новость
Post.objects.create(author=author1, categoryType= 'NW', title= 'Новости', text= 'Много разного текста')  


5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2)) 
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3)) 
Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4)) 
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=4)) 
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=1)) 
Post.objects.get(id=3).postCategory.add(Category.objects.get(id=1)) 



6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='new text')
Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='new text')
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text='new text')
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='new text')
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text='new text')
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='new text')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Comment.objects.get(id=1).like()

Post.objects.get(id=1).like()

Comment.objects.get(id=1).dislike()

Post.objects.get(id=1).dislike()

8. Обновить рейтинги пользователей.

a = Author.objects.get(id=1)
a.update_rating()
a.ratingAuthor

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

a = Author.objects.order_by('ratingAuthor')[:1]

	for i in a:                                     
...     i.ratingAuthor                
...     i.authorUser.username

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

a = Post.objects.order_by('-rating').values('dateCreation', 'author__authorUser__username', 'rating', 'title')[0]
Post.objects.order_by('-rating')[0].preview()

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

Post.objects.order_by('-rating')[1].comment_set.all().values('dateCreation', 'commentUser__username', 'rating', 'text')